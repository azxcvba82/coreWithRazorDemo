@page "/dashboard"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@code {
    private UserProfile profile;
    private List<LoginModel> userData;
    private string errorMessage;
    private int page = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    public class UserResponse
    {
        public int TotalCount { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Get, "api/profile");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            profile = await response.Content.ReadFromJsonAsync<UserProfile>();
            await LoadUsers(token);
        }
        else
        {
            errorMessage = "Failed to fetch profile data.";
        }
    }

    private async Task LoadUsers(string token)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "api/userData");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await Http.SendAsync(request);
        userData = await response.Content.ReadFromJsonAsync<List<LoginModel>>();
    }

    private async Task PreviousPage()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (page > 1)
        {
            page--;
            await LoadUsers(token);
        }
    }

    private async Task NextPage()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (page < totalPages)
        {
            page++;
            await LoadUsers(token);
        }
    }
}

<h3>Dashboard</h3>

@if (profile != null)
{
    <div>
        <p>Username: @profile.username</p>
        <p>Email: @profile.email</p>
        <p>Full Name: @profile.fullName</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@if (userData != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Password</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userData)
            {
                <tr>
                    <td>@user.username</td>
                    <td>@user.password</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(page == 1)">Previous</button>
        <span>Page @(page) of @totalPages</span>
        <button @onclick="NextPage" disabled="@(page == totalPages)">Next</button>
    </div>
}
else
{
    <p>Loading users...</p>
}
